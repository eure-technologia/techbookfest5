
= まえがき

「Clojureで作るハイパフォーマンスSPA」を手にとって頂き、ありがとうございます。
本書は、著者が業務中に実践しているパフォーマンスに配慮したSPAをClojureで実現するまでの手法をまとめたものです。
応用的な内容のためある程度Clojureについての前提知識が必要かと思いますが、本書がClojureでWebフロントエンド開発をする際に少しでも役に立てれば幸いです。

//image[sample-spa-top][作成するサンプルアプリ][scale=0.5]{
//}

本書では、SPAのサンプルとして上の画像のようなGitHubクライアントアプリケーションを作ります。
完成後のものが https://sample-github-spa.now.sh にデプロイされているので、GitHubのアカウントがあれば是非一度お試しください。

また、本書の中で登場するサンプルコードは全てGitHub上のレポジトリsample-github-spa(https://github.com/boxp/sample-github-spa)に用意してあるので適宜ご参照ください。

最後に、本書を執筆するにあたりアドバイスをくれた同僚達と編集作業をしてくれたfutaboooさん、並びに表紙絵を書いてくださったkarinさんにこの場を借りて深く感謝します。今執筆している文がこうして製本されて頒布されているのは間違いなく皆さんのお陰です。 重ね重ね感謝致します。　

それでは、次の章から本編へ移ります！　

= プロジェクトの準備

まず、開発にあたって最低限必要となるプロジェクト構成を組み立てて行きます。

== Reagent+re-frameの導入

SPAを実装するにあたって欠かす事のできないView周りの処理を担うライブラリを導入します。
Clojureを使う場合、基本的にReact.jsとそのClojure向けWrapperが広く利用されているため今回もReact.jsは利用していきましょう。

React.jsのClojure向けWrapperに関してはいくつか選択肢がありますが、ここではReagentとその状態管理を担うre-frameを使います。
これに関しては、他のライブラリ（OmやRumなど）でも同様のパフォーマンスは期待できるため特にReagentとre-frameでなければならない理由はないのですが、著者が最も扱いになれている点からこちらを例にとって進めさせてください。

さて、Reagent+re-frameを手っ取り早く導入するためにはre-frameのLeiningenテンプレートを使ってしまうのが良いでしょう。
以下のコマンドでプロジェクトを生成できます。

//emlistnum[プロジェクトの生成][sh]{
$ lein new re-frame sample-github-spa
//}

これで最小限の準備が整いました。

続いて、ハイパフォーマンスなSPAを実現するための基盤整備を整えて行きます。

= ハイパフォーマンスなSPAを実現するための基盤整備

== Code splitting + LazyLoadを実現させる

=== クライアントサイドルーティング(Secretary & pushy)の導入

re-frameのLeiningenテンプレートから生成されたばかりのプロジェクトでは単一の画面のみがサンプルとして用意されています。
このままではSPAに必要な他の画面への画面遷移が不可能なため、クライアントサイドルーティングによる複数画面遷移の実装が不可欠です。

== ServiceWorkerを実装する

== SSRを実装する

= Componentの設計と実装

= app-stateの実装

= event handlerの実装

= queryの実装
